# 前端开发规范手册

标签（空格分隔）： 学习笔记

---

<h1>基本原则</h1>
1. 结构、样式、行为分离
2. 缩进： 统一**两个空格**缩进，不要使用`Tab`,或者`Tab`和空格混搭。
3. 一律使用小写字母
```
/* Recommended */
color: #e5e5e5;

/* Not recommended */
color: #E5E5E5;
```
4.省略外链资源 URL 协议部分,避免`Mixed Content` 问题，减小文件字节数。**其它协议（ftp 等）的 URL 不省略。**
5.`html注释`:
**模块注释**
```
<!-- 文章列表列表模块 -->
<div class="article-list">
...
</div>
```

**区块注释**

```
<!--
@name: Drop Down Menu
@description: Style of top bar drop down menu.
@author: Ashu(Aaaaaashu@gmail.com)
-->
```
6.`css`注释

```
/* ==========================================================================
   组件块
 ============================================================================ */

/* 子组件块
 ============================================================================ */
```
7.`JavaScript` 注释

 - 单行注释

必须独占一行。// 后跟一个空格，缩进与下一行被注释说明的代码一致。

 - 多行注释

避免使用 /*...*/ 这样的多行注释。有多行注释内容时，使用多个单行注释。

 - 函数/方法注释
 - 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。；
 - 参数和返回值注释必须包含类型信息和说明；
 - 当函数是内部函数，外部不可访问时，可以使用 @inner 标识；

```
/**
 * 函数描述
 *  * @param {string} p1 参数1的说明
 * @param {string} p2 参数2的说明，比较长
 *     那就换行了.
 * @param {number=} p3 参数3的说明（可选）
 * @return {Object} 返回值描述
 */
function foo(p1, p2, p3) {
    var p3 = p3 || 10;
    return {
        p1: p1,
        p2: p2,
        p3: p3
    };
}
```
 * 文件注释
文件注释用于告诉不熟悉这段代码的读者这个文件中包含哪些东西。 应该提供文件的大体内容, 它的作者, 依赖关系和兼容性信息。如下:
```
/**
 * @fileoverview Description of file, its uses and information
 * about its dependencies.
 * @author user@meizu.com (Firstname Lastname)
 * Copyright 2015 Meizu Inc. All Rights Reserved.
 */
```
<h1>HTML</h1>
<h3>Class 与 ID</h3>
 * 只允许使用的小写字母、连字符、数字；
 * class 应以功能或内容命名，不以表现形式命只允许使用的小写字母、连字符、数字；名；
 * class 与 id 单词字母小写，多个单词组成时，采用中划线-分隔；
 * 使用唯一的 id , 同时避免创建无样式信息的 class；
 
<h3>属性顺序</h3>
HTML 属性应该按照特定的顺序出现以保证易读性。

 * id
 * class
 * name
 * data-xxx
 * src, for, type, href
 * title, alt
 * aria-xxx, role
<h3>引号</h3>
属性的定义，统一使用双引号。
```
<span id="j-hook" class="text">Google</span>
```
<h3>嵌套</h3>
`a 不允许嵌套 div`这种约束属于**语义嵌套约束**，与之区别的约束还有**严格嵌套约束**，比如`a 不允许嵌套 a`。
严格嵌套约束在所有的浏览器下都不被允许；而语义嵌套约束，浏览器大多会容错处理，生成的文档树可能相互不太一样。
**语义嵌套约束**

     <li> 用于 <ul> 或 <ol> 下；
     <dd>, <dt> 用于 <dl> 下；
     <thead>, <tbody>, <tfoot>, <tr>, <td> 用于 <table> 下；
**严格嵌套约束**

     inline-Level 元素，仅可以包含文本或其它 inline-Level 元素;
     <a>里不可以嵌套交互式元素<a>、<button>、<select>等;
     <p>里不可以嵌套块级元素<div>、<h1>~<h6>、<p>、<ul>/<ol>/<li>、<dl>/<dt>/<dd>、<form>等。
<h3>布尔值属性</h3>
HTML5 规范中 disabled、checked、selected 等属性不用设置值。
```
<input type="text" disabled>
```
<h3>讲究语义化</h3>
可以参考[这样去写你的html](http://wenku.baidu.com/view/0a8d3774f242336c1eb95ea9.html)
<h3>HEAD</h3>
<h4>文档类型</h4>
为每个 HTML 页面的第一行添加标准模式（standard mode）的声明， 这样能够确保在每个浏览器中拥有一致的表现。
<h4>语言属性</h4>
可以参考[网页头部的声明应该是用 lang="zh" 还是 lang="zh-cn"？](http://www.zhihu.com/question/20797118)
<h4>字符编码</h4>
- 以无 BOM 的 utf-8 编码作为文件格式;
- 指定字符编码的 `meta`必须是head的第一个直接子元素；请参考前端观察的博文
<h4>IE 兼容模式</h4>
优先使用最新版本的IE 和 Chrome 内核

`<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">`
<h4>viewport</h4>

    viewport: 一般指的是浏览器窗口内容区的大小，不包含工具条、选项卡等内容；
    width: 浏览器宽度，输出设备中的页面可见区域宽度；
    device-width: 设备分辨率宽度，输出设备的屏幕可见宽度；
    initial-scale: 初始缩放比例；
    maximum-scale: 最大缩放比例；
    为移动端设备优化，设置可见区域的宽度和初始缩放比例。
```
<meta name="viewport" content="width=device-width, initial-scale=1.0">
```
<h4>iOS 图标</h4>
`apple-touch-icon` 图片自动处理成圆角和高光等效果;
`apple-touch-icon-precomposed `禁止系统自动添加效果，直接显示设计原图;
<!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->
`<link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-57x57-precomposed.png">`
<h4>favicon</h4>
在未指定 favicon 时，大多数浏览器会请求 Web Server 根目录下的 favicon.ico 。为了保证 favicon 可访问，避免404，必须遵循以下两种方法之一：

- 在 Web Server 根目录放置 favicon.ico 文件；
- 使用 link 指定 favicon；
`<link rel="shortcut icon" href="path/to/favicon.ico">`
<h1>CSS</h1>
- 使用语义化、通用的命名方式；
- 使用连字符 - 作为 ID、Class 名称界定符，不要驼峰命名法和下划线；
- 避免选择器嵌套层级过多，尽量少于 3 级；
- 避免选择器和 Class、ID 叠加使用；
<h3>Class 和 ID</h3>
- 选择器分组时，保持独立的选择器占用一行；
- 声明块的左括号 { 前添加一个空格；
- 声明块的右括号 } 应单独成行；
- 声明语句中的 : 后应添加一个空格；
- 声明语句应以分号 ; 结尾；
- 一般以逗号分隔的属性值，每个逗号后应添加一个空格；
- rgb()、rgba()、hsl()、hsla() 或 rect() 括号内的值，逗号分隔，但逗号后不添加一个空格；
- 对于属性值或颜色参数，省略小于 1 的小数前面的 0 （例如，.5 代替 0.5；-.5px 代替-0.5px）；
- 十六进制值应该全部小写和尽量简写，例如，#fff 代替 #ffffff；
- 避免为 0 值指定单位，例如，用 margin: 0; 代替 margin: 0px;；
<h3>声明顺序</h3>
相关属性应为一组，推荐的样式编写顺序

     Positioning(定位）
     Box model(盒模型)
     Typographic(排字上的)
     Visual(视觉上的)
<h3>引号使用</h3>
     url() 、属性选择符、属性值使用双引号。
<h3>链接的样式顺序：</h3>
`a:link -> a:visited -> a:hover -> a:active（LoVeHAte）`
<h3>css命名总结</h3>
以 Components 的角度思考，以两个单词命名（.screenshot-image）
Components 中的 Elements，以一个单词命名（.blog-post .title）
Variants，以中划线-作为前缀（.shop-banner.-with-icon）
Components 可以互相嵌套
<h3>css性能优化</h3>
<h4>慎重选择高消耗的样式</h4>
高消耗属性在绘制前需要浏览器进行大量计算：

     box-shadows
     border-radius
     transparency
     transforms
     CSS filters（性能杀手）
<h4>避免过分重排</h4>
当发生重排的时候，浏览器需要重新计算布局位置与大小。

常见的重排元素:

    width
    height
    padding
    margin//还有很多......
<h4>正确使用 Display 的属性</h4>
Display 属性会影响页面的渲染，请合理使用。

- display: inline后不应该再使用 width、height、margin、padding 以及 float；

- display: inline-block 后不应该再使用 float；

- display: block 后不应该再使用 vertical-align；

- display: table-* 后不应该再使用 margin 或者 float；
<h4>不滥用 Float</h4>
Float在渲染时计算量比较大，尽量减少使用。
<h4>提升 CSS 选择器性能</h4>
CSS 选择器是从右到左进行规则匹配
子选择器: `#header > a {font-weight:blod;}`
浏览器必须遍历页面中所有的 a 元素并且确定其父元素的 id 是否为 header 。性能消耗很大。
后代选择器: `#header  a {font-weight:blod;}`
在遍历页面中所有 a 元素后还需向其上级遍历直到根节点。此方法开销更大。
**在选择器中提高性能的总结**
1、避免使用通用选择器
2、避免使用标签或 class 选择器限制 id 选择器
3、避免使用标签限制 class 选择器
4、避免使用多层标签选择器。使用 class 选择器替换，减少css查找
5、避免使用子选择器
6、使用继承
<h3>JavaScript</h3>
<h4>js命名</h4>
- 变量, 使用 Camel 命名法。
`var loadingModules = {};`
- 私有属性、变量和方法以下划线 _ 开头。
- 常量, 使用全部字母大写，单词间下划线分隔的命名方式。 
 - 函数，函数的参数使用Camel命名法
 - 类, 使用 Pascal 命名法，类的方法或属性, 使用 Camel 命名法
 - 枚举变量 使用 Pascal命名法。枚举的属性，使用全部字母大写，单词间下划线分隔的命名方式。
- 由多个单词组成的 缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。
```
function XMLParser() {}

function insertHTML(element, html) {}

var httpRequest = new HTTPRequest();
```
<h4>命名语法</h4>
- 类名，使用名词。
- 函数名，使用动宾短语。
- boolean 类型的变量使用 is 或 has 开头。
- Promise 对象用动宾短语的进行时表达。
<h4>True 和 False 布尔表达式</h4>
     类型检测优先使用 typeof。
     对象类型检测使用 instanceof。
     null 或 undefined 的检测使用 == null。
<h4>不要在 Array 上使用 for-in 循环</h4>
<h4>二元和三元操作符</h4>
- 操作符始终写在前一行, 以免分号的隐式插入产生预想不到的问题。
- 条件(三元)操作符 (?:)三元操作符用于替代 if 条件判断语句。
- 二元布尔操作符是可短路的, 只有在必要时才会计算到最后一项。
<h4>js的性能优化</h4>
    1. 避免不必要的 DOM 操作
    浏览器遍历 DOM 元素的代价是昂贵的。最简单优化 DOM 树查询的方案是，当一个元素出现多次时，将它保存在一个变量中，就避免多次查询 DOM 树了。
    2.缓存数组长度
    循环无疑是和 JavaScript性能非常相关的一部分。通过存储数组的长度，可以有效避免每次循环重新计算。
    注: 虽然现代浏览器引擎会自动优化这个过程，但是不要忘记还有旧的浏览器
    3.异步加载第三方内容
    4.避免使用 jQuery 实现动画
          1. 禁止使用 slideUp/Down() fadeIn/fadeOut() 等方法；
          2. 尽量不使用 animate() 方法；
          
<h3>jQuery 规范</h3>
<h4>jQuery 变量</h4>
- 存放 jQuery 对象的变量以 $ 开头；
- 将 jQuery 选择器返回的对象缓存到本地变量中复用；
- 使用驼峰命名变量；
<h4>选择器</h4>
- 尽可能的使用 ID 选择器，因为它会调用浏览器原生方法document.getElementById 查找元素。当然直接使用原生document.getElementById方法性能会更好；
- 在父元素中选择子元素使用 .find() 方法性能会更好, 因为 ID 选择器没有使用到 Sizzle 选择器引擎来查找元素；
<h4>DOM 操作</h4>
当要操作 DOM 元素的时候，尽量将其分离节点，操作结束后，再插入节点；
使用字符串连接或 `array.join` 要比` .append()`性能更好；
<h4>事件</h4>
- 如果需要，对事件使用自定义的namespace，这样容易解绑特定的事件，而不会影响到此 DOM 元素的其他事件监听；
- 对 Ajax 加载的 DOM元素绑定事件时尽量使用事件委托。事件委托允许在父元素绑定事件，子代元素可以响应事件，也包括 Ajax加载后添加的子代元素；
```
// Not recommended
$("#list a").on("click", myClickHandler);

// Recommended
$("#list").on("click", "a", myClickHandler);
```
<h4>链式写法</h4>
尽量使用链式写法而不是用变量缓存或者多次调用选择器方法；
当链式写法超过三次或者因为事件绑定变得复杂后，使用换行和缩进保持代码可读性；
<h4>其他</h4>
多个参数使用对象字面量存储；
不要将 CSS 写在 jQuery 里面；
正则表达式仅准用` .test()` 和` .exec()` 。不准用` "string".match()` ；